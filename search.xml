<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>eslint+husky+prettier+lint-staged配置前端代码校验规范</title>
    <url>/2019/12/21/eslint-husky-prettier-lint-staged%E9%85%8D%E7%BD%AE%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E6%A0%A1%E9%AA%8C%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p>当团队中多人协作时，因为同事之间不同的代码风格和编辑器，会导致项目的代码无法统一风格，不利于阅读，也更容易造成bug，为统一项目中代码的风格，减少书写上的bug，所以整理了一下利用 eslint+husky+prettier+lint-staged来配置前端代码规范。</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="npm包安装"><a href="#npm包安装" class="headerlink" title="npm包安装"></a>npm包安装</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ npm i -D eslint prettier eslint-plugin-prettier eslint-config-prettier husky lint-staged</span><br><span class="line">$ yarn add eslint prettier eslint-plugin-prettier eslint-config-prettier husky lint-staged -D</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h5 id="1、在前端应用中的package-json中新增如下文件："><a href="#1、在前端应用中的package-json中新增如下文件：" class="headerlink" title="1、在前端应用中的package.json中新增如下文件："></a>1、在前端应用中的package.json中新增如下文件：</h5><ul>
<li>在scripts中直接写“precommit”会报错，解决方案是：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"husky"</span>: &#123;</span><br><span class="line">    <span class="string">"hooks"</span>: &#123;</span><br><span class="line">      <span class="string">"pre-commit"</span>: <span class="string">"lint-staged"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"lint-staged"</span>: &#123;</span><br><span class="line">    <span class="string">"src/**/*.js"</span>: [</span><br><span class="line">      <span class="string">"eslint --fix --ext .js"</span>,</span><br><span class="line">      <span class="string">"prettier --write"</span>,</span><br><span class="line">      <span class="string">"git add"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"eslint"</span>: <span class="string">"^5.0.0"</span>,</span><br><span class="line">    <span class="string">"eslint-config-ali"</span>: <span class="string">"^2.0.1"</span>,</span><br><span class="line">    <span class="string">"eslint-plugin-import"</span>: <span class="string">"^2.6.0"</span>,</span><br><span class="line">    <span class="string">"eslint-plugin-react"</span>: <span class="string">"^7.1.0"</span>,</span><br><span class="line">    <span class="string">"husky"</span>: <span class="string">"^0.14.2"</span>,</span><br><span class="line">    <span class="string">"babel-eslint"</span>: <span class="string">"^8.1.1"</span>,</span><br><span class="line">    <span class="string">"lint-staged"</span>: <span class="string">"^4.0.0"</span>,</span><br><span class="line">    <span class="string">"prettier"</span>:<span class="string">"^1.16.4"</span>,</span><br><span class="line">    <span class="string">"eslint-plugin-prettier"</span>:<span class="string">"^3.0.1"</span>,</span><br><span class="line">    <span class="string">"eslint-config-prettier"</span>:<span class="string">"^4.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">备注：</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"*.js"</span>: <span class="string">"工程下所有的 js 文件"</span>,</span><br><span class="line">    <span class="string">"**/*.js"</span>: <span class="string">"工程下所有的 js 文件"</span>,</span><br><span class="line">    <span class="string">"src/*.js"</span>: <span class="string">"src 目录中所有的 js 文件"</span>,</span><br><span class="line">    <span class="string">"src/**/*.js"</span>: <span class="string">"src 文件夹下所有的 js 文件"</span>,</span><br><span class="line">    <span class="string">"src/**/*.&#123;js,vue&#125;"</span>: <span class="string">"src 文件夹下的所有的 js 和 vue文件"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2、增加-eslintrc-js-扫描规则："><a href="#2、增加-eslintrc-js-扫描规则：" class="headerlink" title="2、增加 .eslintrc.js 扫描规则："></a>2、增加 .eslintrc.js 扫描规则：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">"extends"</span>: [<span class="string">"eslint-config-ali"</span>,<span class="string">"prettier"</span>, <span class="string">"plugin:prettier/recommended"</span>],</span><br><span class="line">  <span class="string">"parser"</span>: <span class="string">"babel-eslint"</span>,</span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="string">"prettier/prettier"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"strict"</span>: <span class="string">"off"</span>,</span><br><span class="line">    <span class="string">"no-console"</span>: <span class="string">"off"</span>,</span><br><span class="line">    <span class="string">"import/no-dynamic-require"</span>: <span class="string">"off"</span>,</span><br><span class="line">    <span class="string">"global-require"</span>: <span class="string">"off"</span>,</span><br><span class="line">    <span class="string">"require-yield"</span>: <span class="string">"off"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"plugins"</span>: [<span class="string">"prettier"</span>],</span><br><span class="line">  <span class="string">"globals"</span>: &#123;</span><br><span class="line">    <span class="string">"React"</span>: <span class="string">"readable"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  extends: [<span class="string">'airbnb-base'</span>, <span class="string">"prettier"</span>, <span class="string">'plugin:vue/recommended'</span>],</span><br><span class="line">  parser: <span class="string">'vue-eslint-parser'</span>,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    parser: <span class="string">'babel-eslint'</span>,</span><br><span class="line">    sourceType: <span class="string">'module'</span>,</span><br><span class="line">    ecamaVersion: <span class="number">2018</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">    node: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  globals: &#123;</span><br><span class="line">    __static: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">"vue"</span>,</span><br><span class="line">    <span class="string">"prettier"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">'rules'</span>: &#123;</span><br><span class="line">    <span class="string">'import/no-unresolved'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"import/no-extraneous-dependencies"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="comment">// allow paren-less arrow functions</span></span><br><span class="line">    <span class="string">'arrow-parens'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// allow async-await</span></span><br><span class="line">    <span class="string">'generator-star-spacing'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// allow debugger during development</span></span><br><span class="line">    <span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="number">2</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="string">"lines-between-class-members"</span>: [<span class="string">"error"</span>, <span class="string">"always"</span>, &#123;</span><br><span class="line">      exceptAfterSingleLine: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">"arrow-body-style"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"comma-dangle"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"semi"</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="string">"object-curly-newline"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"max-len"</span>: [<span class="number">0</span>, &#123;</span><br><span class="line">      <span class="string">"code"</span>: <span class="number">200</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">"global-require"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"guard-for-in"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"no-console"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"no-unused-vars"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"no-param-reassign"</span>: [<span class="number">2</span>, &#123; <span class="string">"props"</span>: <span class="literal">false</span> &#125;],</span><br><span class="line">    <span class="string">"no-restricted-syntax"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">"no-restricted-globals"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">"no-underscore-dangle"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">"no-shadow"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">"no-lonely-if"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">"vue/require-valid-default-prop"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">"vue/no-unused-vars"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"vue/require-v-for-key"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"vue/max-attributes-per-line"</span>: <span class="number">0</span>, <span class="comment">// 解决Attribute "bind" should be on a new line</span></span><br><span class="line">    <span class="string">"vue/html-self-closing"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"vue/order-in-components"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'vue/attribute-hyphenation'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"vue/no-parsing-error"</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">"x-invalid-end-tag"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3、增加-prettierrc-js-文件，用于在扫描通过后格式化代码-该步骤可选，如果不引入prettier的话，相应的在package和eslint中去除掉相应配置即可"><a href="#3、增加-prettierrc-js-文件，用于在扫描通过后格式化代码-该步骤可选，如果不引入prettier的话，相应的在package和eslint中去除掉相应配置即可" class="headerlink" title="3、增加 .prettierrc.js 文件，用于在扫描通过后格式化代码(该步骤可选，如果不引入prettier的话，相应的在package和eslint中去除掉相应配置即可)"></a>3、增加 .prettierrc.js 文件，用于在扫描通过后格式化代码(该步骤可选，如果不引入prettier的话，相应的在package和eslint中去除掉相应配置即可)</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  printWidth: <span class="number">80</span>, <span class="comment">// 设置prettier单行输出(不拆行)的(最大)长度，默认为80</span></span><br><span class="line">  tabWidth: <span class="number">2</span>, <span class="comment">// 设置工具每一个水平缩进的空格数</span></span><br><span class="line">  useTabs: <span class="literal">false</span>, <span class="comment">// 使用tab(制表位)缩进而非空格</span></span><br><span class="line">  semi: <span class="literal">false</span>,  <span class="comment">// 使用分号结尾，默认为true</span></span><br><span class="line">  singleQuote: <span class="literal">true</span>, <span class="comment">// 使用单引号，在jsx语法中，所有引号均为双引号，改设置在jsx中被自动忽略</span></span><br><span class="line">  trailingComma: <span class="string">'none'</span>,  <span class="comment">// 行尾逗号，默认none,可选none|es5|all</span></span><br><span class="line">    <span class="comment">// none 无尾逗号</span></span><br><span class="line">    <span class="comment">// es5 添加es5中被支持的尾逗号</span></span><br><span class="line">    <span class="comment">// all 所有可能的地方都被添加尾逗号</span></span><br><span class="line">  bracketSpacing: <span class="literal">true</span>, <span class="comment">// 在对象字面量声明所使用的花括号后(&#123;)和前(&#125;)输出空格  true -- &#123; foo: bar &#125;   false -- &#123;foo:bar&#125;</span></span><br><span class="line">  jsxBracketSameLine: <span class="literal">false</span>, <span class="comment">// 在多行jsx元素最后一行的末尾添加 &gt; 而使 &gt; 单独一行 (不适用于自闭和元素)</span></span><br><span class="line">  arrowParens: <span class="string">'avoid'</span>, <span class="comment">// 箭头函数参数括号 默认avoid 可选 avoid| always</span></span><br><span class="line">    <span class="comment">// avoid 能省略括号的时候就省略 例如 x =&gt; x</span></span><br><span class="line">    <span class="comment">// always 总是有括号</span></span><br><span class="line">  requirePragma: <span class="literal">false</span>, <span class="comment">// 严格按照文件顶部的一些特殊的注释格式化代码</span></span><br><span class="line">  insertPragma: <span class="literal">false</span>, <span class="comment">// 在文件的顶部插入一个@format的特殊注释，以表明该文件已经被Prettier格式化过了。</span></span><br><span class="line">  proseWrap: <span class="string">'preserve'</span> <span class="comment">// 文件折行的方式 可选参数：always|never|perserve</span></span><br><span class="line">    <span class="comment">// always 当超出print width时就折行</span></span><br><span class="line">    <span class="comment">// never 不折行</span></span><br><span class="line">    <span class="comment">// perserve 按照文件原样折行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><h5 id="1、执行流程"><a href="#1、执行流程" class="headerlink" title="1、执行流程"></a>1、执行流程</h5><p>达到上述效果，执行的流程如下：</p>
<ul>
<li>待提交的代码git add添加到暂存区；</li>
<li>执行git commit;</li>
<li>husky注册在git pre-commit的钩子函数被调用，执行lint-staged;</li>
<li>lint-staged取得所有被提交的文件依次执行写好的任务(ESlint 和 Prettier);</li>
<li>如果有错误(没通过ESlint检查) 则停止任务，同时打印错误信息，等待修复后再执行commit；</li>
<li>成功commit，可push到远程。</li>
</ul>
<p>在上述流程中，有这样几个核心点：</p>
<ul>
<li>husky注册git的钩子函数保证在git 执行commit时调用代码扫描的动作；</li>
<li>eslint完成按照配置的规则进行扫描；</li>
<li>Lint-staged保证只对当前add到git stage区的文件进行扫描操作，这样做的原因在于，如果对全工程的文件进行扫描的话，并且之前的前端工程并未注重代码规则的检测的话，很大可能性会出现成百上千的error，基本上心里是崩溃的。因此，只对当前add的文件进行检测，达到及时止损的目的，历史代码可以切到新的分支进行修复后再进行合并。</li>
</ul>
<h5 id="2、插件说明"><a href="#2、插件说明" class="headerlink" title="2、插件说明"></a>2、插件说明</h5><ul>
<li><h6 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h6><p>eslint是一个插件化的JavaScript代码检测工具。</p>
<p>eslint的优点如下：</p>
<p>1、可配置的代码检测工具；</p>
<p>2、确保应用的线上质量，不满足代码规范的代码都不能push到远程分支上；</p>
<p>3、更高的可读性，eslint会对代码质量进行扫描，并且一般结合prettier使用的话，在通过代码规范后可以对代码进行格式化，可以保证代码可读性；</p>
<p>4、避免低级的错误，通过eslint –fix可以根据规范对代码的部分低级错误进行更正。</p>
</li>
<li><h6 id="husky"><a href="#husky" class="headerlink" title="husky"></a>husky</h6><p>确保本地的代码已经通过检查才能push到远程，这样才能从一定程度上确保应用的线上质量，同时能够避免lint的反馈流程过长。</p>
</li>
<li><h6 id="lint-staged"><a href="#lint-staged" class="headerlink" title="lint-staged"></a>lint-staged</h6><p>每次只对当前修改后的文件进行扫描，即进行git add加入到stage区的文件进行扫描即可，完成对增量代码进行检查。如何实现呢？这里就需要使用到lint-staged工具来识别被加入到stage区文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"precommit"</span>: <span class="string">"lint-staged"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"lint-staged"</span>: &#123;</span><br><span class="line">  <span class="string">"src/**/*.js"</span>: [</span><br><span class="line">    <span class="string">"eslint --fix --ext .js"</span>,</span><br><span class="line">    <span class="string">"prettier --write"</span>,</span><br><span class="line">    <span class="string">"git add"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在进行git commit的时候会触发到git hook进而执行precommit，而precommit脚本引用了lint-staged配置表明只对git add到stage区的文件进行扫描，具体lint-staged做了三件事：</p>
<p>1、执行eslint –fix操作，进行扫描，若发现工具可修复的问题进行fix;</p>
<p>2、执行prettier脚本，这是对代码进行格式化的；</p>
<p>3、上述两项任务完成后对代码重新add。</p>
</li>
<li><h6 id="prettier"><a href="#prettier" class="headerlink" title="prettier"></a>prettier</h6><p>prettier工具主要用来统一代码格式，eslint也会对代码进行一定程度的格式校验，但主要用来对代码规范的扫描，而prettier则是专门用来对代码进行格式化，两个工具各司其职，为代码质量保驾护航。它的主要原理是将格式化前的代码和格式化后的代码进行对比，如果发现不一样，prettier就会对其进行标记并按照指定的格式化规范进行修复。</p>
</li>
</ul>
<h3 id="附加内容"><a href="#附加内容" class="headerlink" title="附加内容"></a>附加内容</h3><h5 id="editorconfig介绍"><a href="#editorconfig介绍" class="headerlink" title="editorconfig介绍"></a>editorconfig介绍</h5><p>当多人共同开发一个项目时，每个人使用的编辑器各不相同，为了对编辑器统一代码风格，引入了editorconfig。</p>
<p>用editorconfg解决上述问题的步骤：</p>
<ul>
<li>在项目根目录下创建一个名为 .editorconfig 的文件。该文件的内容定义改项目的编码规范。editorconfig支持的编码规范在后文会有详细的介绍。</li>
<li>安装与编辑器对应的editorconfig插件。</li>
</ul>
<p>其工作原理是：当你再编码的时候，editorconfig插件会去查找当前编辑文件的所在文件夹或其上级文件夹中是否有 .editorconfig 文件。如果有，则编辑器的行为会与 .editorconfig 文件中定义的一致，并且其优先级高于编辑器自身的设置。</p>
]]></content>
      <categories>
        <category>前端配置</category>
      </categories>
      <tags>
        <tag>代码规范</tag>
      </tags>
  </entry>
  <entry>
    <title>electron-vue利用webpack打包实现多页面的入口文件</title>
    <url>/2019/06/21/electron-vue%E5%88%A9%E7%94%A8webpack%E6%89%93%E5%8C%85%E5%AE%9E%E7%8E%B0%E5%A4%9A%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>项目需要在electron的项目中新打开一个窗口，利用webpack作为静态资源打包器，发现在webpack中可以设置多页面的入口，今天来讲一下我在electron中利用webpack建立多页面入口的踩坑经验。</p>
<h4 id="1、webpack的核心概念"><a href="#1、webpack的核心概念" class="headerlink" title="1、webpack的核心概念"></a>1、webpack的核心概念</h4><ul>
<li>Entry：入口，Webpack执行构建的第一步从Entry开始；</li>
<li>Module：模块，在Webpack里一切皆模块，一个模块对应着一个文件。Webpack会从配置的Entry开始递归找出所有依赖的模块。</li>
<li>Chunk：代码块，一个Chunk由多个模块组合而成，用于代码合并与分割。</li>
<li>Loader：模块转换器，用于把模块原内容按照需求转换成新内容。</li>
<li>Plugin：扩展插件，在Webpack构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。</li>
<li>Output：输出结果，在Webpack经过一系列处理并得出最终想要的代码后输出结果。</li>
</ul>
<a id="more"></a>

<h4 id="2、配置多页面的入口文件"><a href="#2、配置多页面的入口文件" class="headerlink" title="2、配置多页面的入口文件"></a>2、配置多页面的入口文件</h4><p>electron构建后的项目目录如下：</p>
<p><img src="https://i.loli.net/2019/06/20/5d0aeee31efa696976.png" alt></p>
<ul>
<li><h5 id="创建新的页面"><a href="#创建新的页面" class="headerlink" title="创建新的页面"></a>创建新的页面</h5><p>vue-cli生成的项目中只有一个main.js主入口的js文件来处理所有的vue页面，我们创建多个页面需要生成一个这个页面相对应的js文件，保存该页面中包含的内容。</p>
</li>
<li><h5 id="配置多页面的入口文件"><a href="#配置多页面的入口文件" class="headerlink" title="配置多页面的入口文件"></a>配置多页面的入口文件</h5><p>electron-vue创建的项目中有三个webpack的配置，我主要是在webpack.renderer.config中配置多个入口，生成多页面的入口文件，代码如下：</p>
<p><img src="https://i.loli.net/2019/06/20/5d0aef394308586575.png" alt></p>
</li>
</ul>
<p>webpack中的HtmlWebpackPlugin插件是用来简单创建HTML文件，用于服务器访问。必须在新建HtmlWebpackPlugin中写chunks,不然无法识别，页面加载不出来</p>
<ul>
<li><p>electron中新建窗口，访问新生成的页面</p>
<p>electron中src的main文件中的index.js为主进程，在该页面中新建窗口，调用新生成的HTML文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const dialpadUrl = process.env.NODE_ENV === &apos;development&apos;</span><br><span class="line">  ? `http://localhost:9080/dialpad.html`</span><br><span class="line">  : `file://$&#123;__dirname&#125;/dialpad.html`</span><br></pre></td></tr></table></figure>

<p>创建新窗口打开页面的地址。electron的win.loadURL(url[, options])中的加载的文件方式包含：</p>
<ul>
<li>httpReferrer：一个HTTP Referrer url</li>
<li>userAgent 发起请求的 userAgent</li>
<li>extraHeaders：用”\n“分割的额外标题</li>
<li>baseURLForDataURL：要加载的数据文件的根URL(带有路径分隔符)，只有当指定的url是一个数据url并需要加载其他文件时，才需要这样做</li>
</ul>
<p>其实我也没太懂这些都是什么，反正据我理解，url加载的只能是远程地址(如：http://)或是本地的HTML文件路径(file://)</p>
<p>参考文章：<a href="https://segmentfault.com/a/1190000014984842#articleHeader0" rel="noopener" target="_blank">https://segmentfault.com/a/1190000014984842#articleHeader0</a></p>
</li>
<li><h5 id="打包报错"><a href="#打包报错" class="headerlink" title="打包报错"></a>打包报错</h5><p>上述就是我在electron-vue中利用webpack实现多页面入口的全过程，不过最后打包时出现了错误，上网搜了一下，说是node内存溢出的问题，在package.json中手动设置node的内存大小就可以啦</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;buildAll&quot;: &quot;node --max-old-space-size=4096 .electron-vue/build.js &amp;&amp; electron-builder&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;node --max-old-space-size=4096 .electron-vue/build.js &amp;&amp; electron-builder --win --   ia32 --publish always&quot;,</span><br><span class="line">    &quot;build:dir&quot;: &quot;node --max-old-space-size=4096 .electron-vue/build.js &amp;&amp; electron-builder --	win --ia32 --dir&quot;,</span><br><span class="line">    &quot;build:clean&quot;: &quot;cross-env BUILD_TARGET=clean node .electron-vue/build.js&quot;,</span><br><span class="line">    &quot;build:web&quot;: &quot;cross-env BUILD_TARGET=web node .electron-vue/build.js&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;node --max-old-space-size=4096 .electron-vue/dev-runner.js&quot;,</span><br><span class="line">    &quot;lint&quot;: &quot;eslint --ext .js,.vue -f ./node_modules/eslint-friendly-formatter src&quot;,</span><br><span class="line">    &quot;lint:fix&quot;: &quot;eslint --ext .js,.vue -f ./node_modules/eslint-friendly-formatter --fix src&quot;,</span><br><span class="line">    &quot;pack&quot;: &quot;npm run pack:main &amp;&amp; npm run pack:renderer&quot;,</span><br><span class="line">    &quot;pack:main&quot;: &quot;cross-env NODE_ENV=production webpack --progress --colors --config .electron-   vue/webpack.main.config.js&quot;,</span><br><span class="line">    &quot;pack:renderer&quot;: &quot;cross-env NODE_ENV=production webpack --progress --colors --config           .electron-vue/webpack.renderer.config.js&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>参考文章：<a href="https://segmentfault.com/a/1190000010437948" rel="noopener" target="_blank">https://segmentfault.com/a/1190000010437948</a></p>
<h4 id="3、多个窗口之间可以利用vuex-electron插件实现数据共享"><a href="#3、多个窗口之间可以利用vuex-electron插件实现数据共享" class="headerlink" title="3、多个窗口之间可以利用vuex-electron插件实现数据共享"></a>3、多个窗口之间可以利用vuex-electron插件实现数据共享</h4><p>​    多个窗口之间本来使用ipc通信来传递数据，发现这样的做法太麻烦啦，就发现了vuex-electron插件可以实现多个窗口之间共享同一个vuex数据。我来说一下它的使用方法：</p>
<p>在src/renderer/store/index.js中引入createSharedMutations和createPersistedState，如果有时候状态没有发生变化，可以将createSharedMutations注释掉(为什么注释掉，暂时还未找到原因)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Vuex from &apos;vuex&apos;</span><br><span class="line"></span><br><span class="line">import &#123; createPersistedState, createSharedMutations &#125; from &apos;vuex-electron&apos;</span><br><span class="line"></span><br><span class="line">import modules from &apos;./modules&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  modules,</span><br><span class="line">  plugins: [</span><br><span class="line">    createPersistedState(),  // 创建数据持久化，不需要时可以删除</span><br><span class="line">    createSharedMutations()  // 创建共享的mutations</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在多个窗口之间就可以用共用同一个vuex中的数据，这样就省去了繁琐的ipc通信，获取数据更方便。</p>
<p>这就是我的分享，有什么不对的地方欢迎指正。</p>
]]></content>
      <categories>
        <category>electron打包</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>react+electron+atnd搭建项目</title>
    <url>/2019/08/06/react-electron-atnd%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h4 id="按需引入antd组件"><a href="#按需引入antd组件" class="headerlink" title="按需引入antd组件"></a>按需引入antd组件</h4><p>1、引入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">yarn add antd react-app-rewired babel-plugin-<span class="keyword">import</span></span><br><span class="line"><span class="comment">// antd 样式组件</span></span><br><span class="line"><span class="comment">// react-app-rewired 自定义配置react项目的工具</span></span><br><span class="line"><span class="comment">// babel-plugin-import 一个按需加载代码、样式的babel插件</span></span><br><span class="line"></span><br><span class="line">yarn customize-cra less-loader less</span><br><span class="line"><span class="comment">// 由于新的react-app-rewired@2.x版本的关系，需要安装customize-cra来配置override文件</span></span><br></pre></td></tr></table></figure>

<p>2、修改根目录下的package.json文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># /package.json</span><br><span class="line"></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">-    <span class="string">"start"</span>: <span class="string">"react-scripts start"</span>,</span><br><span class="line">-    <span class="string">"build"</span>: <span class="string">"react-scripts build"</span>,</span><br><span class="line">-    <span class="string">"test"</span>: <span class="string">"react-scripts test --env=jsdom"</span>,</span><br><span class="line">-	 <span class="string">"eject"</span>: <span class="string">"react-scripts eject"</span>,</span><br><span class="line">+    <span class="string">"start"</span>: <span class="string">"react-app-rewired start"</span>,</span><br><span class="line">+    <span class="string">"build"</span>: <span class="string">"react-app-rewired build"</span>,</span><br><span class="line">+    <span class="string">"test"</span>: <span class="string">"react-app-rewired test --env=jsdom"</span>,</span><br><span class="line">+	 <span class="string">"eject"</span>: <span class="string">"react-app-rewired eject"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>3、在根目录下创建一个config-overrides.js文件，用于书写自定义配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># /config-overrides.js</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; override, fixBabelImports, addLessLoader&#125; = <span class="built_in">require</span>(<span class="string">"customize-cra"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line">  fixBabelImports(<span class="string">"import"</span>, &#123;</span><br><span class="line">    libraryName: <span class="string">"antd"</span>, <span class="attr">libraryDirectory</span>: <span class="string">"es"</span>, <span class="attr">style</span>: <span class="literal">true</span></span><br><span class="line">  &#125;),</span><br><span class="line">  addLessLoader(&#123;</span><br><span class="line">    javascriptEnabled: <span class="literal">true</span>,</span><br><span class="line">    modifyVars: &#123; <span class="string">"@primary-color"</span>: <span class="string">"#1DA57A"</span> &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="将启动react的命令和启动electron的命令合并为一个命令"><a href="#将启动react的命令和启动electron的命令合并为一个命令" class="headerlink" title="将启动react的命令和启动electron的命令合并为一个命令"></a>将启动react的命令和启动electron的命令合并为一个命令</h4><p>1、引入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">yarn add concurrently cross-env wait-on --dev</span><br><span class="line"><span class="comment">// concurrently同时运行多个命令</span></span><br><span class="line"><span class="comment">// 运行react-app-rewired start时，不打开浏览器，需要传入BROWSER=none,所以需要安装cross-env做传值兼容</span></span><br><span class="line"><span class="comment">// 同时运行时，electron打开时，服务器还没运行好，所以需要使用wait-on</span></span><br></pre></td></tr></table></figure>

<p>2、在package.json中添加命令</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"electron-start"</span>: <span class="string">"cross-env NODE_ENV=development electron ."</span>,</span><br><span class="line">    <span class="string">"electron-dev"</span>: <span class="string">"concurrently \"cross-env BROWSER=none yarn start\" \"wait-on 				http://localhost:3000 &amp;&amp; electron . \""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、运行命令 yarn electron-dev就可以看到项目启动起来了。</p>
<h4 id="利用electron-builder打包项目"><a href="#利用electron-builder打包项目" class="headerlink" title="利用electron-builder打包项目"></a>利用electron-builder打包项目</h4><p>1、引入electron-builder，electron-builder只能在开发环境中使用，所以必须下载在devdependencies下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">yarn add electron-builder -D</span><br></pre></td></tr></table></figure>

<p>2、配置package.json文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.1.0"</span>, <span class="comment">// 版本号</span></span><br><span class="line">  <span class="string">"author"</span>: <span class="string">"XXX"</span>, <span class="comment">// 作者</span></span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"XXX"</span>, <span class="comment">// 描述</span></span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"./public/electron.js"</span>, <span class="comment">// 主入口文件必须放入到public文件下(在react项目中，打包时会有报错提示，可以根据提示将electron.js文件放入该放入的文件夹中)</span></span><br><span class="line">  <span class="string">"build"</span>: &#123; <span class="comment">// electron-builder配置</span></span><br><span class="line">    <span class="string">"productName"</span>: <span class="string">"XXX"</span>, <span class="comment">// 项目名称，即打包后的*.exe文件名</span></span><br><span class="line">    <span class="string">"copyright"</span>: <span class="string">"XXX"</span>, <span class="comment">// 版权</span></span><br><span class="line">    <span class="string">"appId"</span>: <span class="string">"XXX"</span>, <span class="comment">// 应用id</span></span><br><span class="line">    <span class="string">"compression"</span>: <span class="string">"maximum"</span>, <span class="comment">// 打包压缩情况 &lt;store|normal|maximum&gt; store相对较快</span></span><br><span class="line">    <span class="string">"asar"</span>: <span class="literal">false</span>, <span class="comment">// asar打包</span></span><br><span class="line">    <span class="string">"directories"</span>: &#123;</span><br><span class="line">      <span class="string">"output"</span>: <span class="string">"build"</span> <span class="comment">// 输出文件夹</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"files"</span>: [</span><br><span class="line">      <span class="string">"dist/**/*"</span>,</span><br><span class="line">      <span class="string">"package.json"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"win"</span>: &#123;</span><br><span class="line">      <span class="string">"target"</span>: <span class="string">"nsis"</span>, <span class="comment">// 打包为nsis安装文件</span></span><br><span class="line">      <span class="string">"icon"</span>: <span class="string">"./public/favicon.ico"</span> <span class="comment">// 应用的图标，改图标必须使用256*256像素的才可以</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"nsis"</span>: &#123; <span class="comment">// nsis配置</span></span><br><span class="line">      <span class="string">"allowToChangeInstallationDirectory"</span>: <span class="literal">true</span>, <span class="comment">// 允许用户选择安装位置</span></span><br><span class="line">      <span class="string">"oneClick"</span>: <span class="literal">false</span>, <span class="comment">// 是否一键安装</span></span><br><span class="line">      <span class="string">"allowElevation"</span>: <span class="literal">false</span> <span class="comment">// 允许请求提升。如果为false，则用户必须使用提升的权限重新启动安装程序</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"react-app-rewired build"</span>,</span><br><span class="line">    <span class="string">"pack"</span>: <span class="string">"electron-builder --dir"</span>, <span class="comment">// 打包为目录文件</span></span><br><span class="line">    <span class="string">"dist"</span>: <span class="string">"electron-builder --win --ia32 --publish always"</span> <span class="comment">// 打包为.exe文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、运行打包命令</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">yarn build <span class="comment">// 打包react项目</span></span><br><span class="line">yarn dist <span class="comment">// 打包electron</span></span><br></pre></td></tr></table></figure>

<h4 id="react-router的使用"><a href="#react-router的使用" class="headerlink" title="react-router的使用"></a>react-router的使用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HashRouter <span class="keyword">as</span> Router, Route, Link, Redirect, Switch &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./Home'</span>;</span><br><span class="line"><span class="keyword">import</span> Profile <span class="keyword">from</span> <span class="string">'./Profile'</span>;</span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">'./User'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Router&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;Link to=<span class="string">"/home"</span>&gt;首页&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Link to="/</span>profile<span class="string">"&gt;个人中心&lt;/Link&gt;</span></span><br><span class="line"><span class="string">            &lt;Link to="</span>/user<span class="string">"&gt;用户&lt;/Link&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;</span></span><br><span class="line"><span class="string">          &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;Switch&gt;</span></span><br><span class="line"><span class="string">              &lt;Route path="</span>/home<span class="string">" exact component=&#123;Home&#125;&gt;</span></span><br><span class="line"><span class="string">                  &lt;Route path="</span>/profile<span class="string">" component=&#123;Profile&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">                  &lt;Route path="</span>/user<span class="string">" component=&#123;User&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">              &lt;/Route&gt;</span></span><br><span class="line"><span class="string">            &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/Router&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">render(&lt;App&gt;&lt;/App&gt;, document.querySelector('#root'));</span></span><br></pre></td></tr></table></figure>

<p>react-router4之前的写法， 路由嵌套时只要这样写就可以，但是如果是react-router4之后写法就跟这种写法不一样啦，需要在其父页面中引入路由，在其父页面中添加使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">import</span> Profile <span class="keyword">from</span> <span class="string">'./Profile'</span>;</span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">'./User'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"home"</span>&gt;</span><br><span class="line">        &lt;Route path=<span class="string">'/profile'</span> component = &#123; Profile &#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">'/user'</span> component = &#123; User &#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="react中使用mobx装饰器报错"><a href="#react中使用mobx装饰器报错" class="headerlink" title="react中使用mobx装饰器报错"></a>react中使用mobx装饰器报错</h4><p>在react项目中使用mobx，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyState</span> </span>&#123;</span><br><span class="line">  @observable num = <span class="number">0</span>;</span><br><span class="line">  @action addNum = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.num++;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动后会收到这样的错误：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">SyntaxError</span>: D:\lianxi\redux-mobx-test\src\App.js: Support <span class="keyword">for</span> the experimental syntax <span class="string">'decorators-legacy'</span> isn<span class="string">'t currently enabled (7:3):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   5 |</span></span><br><span class="line"><span class="string">   6 | class MyState &#123;</span></span><br><span class="line"><span class="string">&gt;  7 |   @observable num = 0;</span></span><br><span class="line"><span class="string">     |   ^</span></span><br><span class="line"><span class="string">   8 |   @action addNum = () =&gt; &#123;</span></span><br><span class="line"><span class="string">   9 |     this.num++;</span></span><br><span class="line"><span class="string">  10 |   &#125;;</span></span><br></pre></td></tr></table></figure>

<p>需要在package.json中配置babel</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add @babel/plugin-proposal-decorators -D</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"babel"</span>: &#123;</span><br><span class="line">    <span class="string">"presets"</span>: [</span><br><span class="line">      <span class="string">"react-app"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"plugins"</span>: [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">"@babel/plugin-proposal-decorators"</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"legacy"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>之后需要执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn eject</span><br></pre></td></tr></table></figure>

<p>执行完之后可能会报错，找不到某些模块，按需添加这些模块就可以，执行完命令之后，babel的这个配置会被覆盖，重新再讲上述代码替换到，重新运行就可以了。</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>electron</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>vue插件从封装到发布npm包以及使用的全过程</title>
    <url>/2019/06/22/vue%E6%8F%92%E4%BB%B6%E4%BB%8E%E5%B0%81%E8%A3%85%E5%88%B0%E5%8F%91%E5%B8%83npm%E5%8C%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9A%84%E5%85%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="封装vue插件"><a href="#封装vue插件" class="headerlink" title="封装vue插件"></a>封装vue插件</h4><p>在开发过程中我们经常会遇到一个组件到处都可以重复使用，如果每次都把代码复制过去就太复杂了，封装为一个插件是最好的选择，哪里需要哪里就引入即可。</p>
<p>利用<code>vue init webpack-simple 文件名</code>创建我们的项目目录，在写文件名之前最好先去npm官网查一下有没有相同的名称，因为创建的文件名就是之后我们要发包的文件名（虽然发包时文件名称也可以修改，但还是直接创建一个不重名的项目比较好）。</p>
<a id="more"></a>

<p>创建好项目之后，项目目录如下所示（这是我修改过的文件目录，创建好的文件目录是一个vue项目）：</p>
<p><img src="https://i.loli.net/2019/06/22/5d0de5ffd653d79995.png" alt></p>
<p>在src下新建一个packages文件夹，来存放我们将要创建的子组件。我创建了一个Test的文件夹，来存放我创建的test组件。我再test目录下放了一个src的文件夹和index.js文件（参考element组件的封装，估计是为了结构更清晰吧。）</p>
<p>src目录下的index.vue文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    这是一个npm包测试的demo</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'Test'</span>,  <span class="comment">// 这个组件的名称必须要写，在之后我们会用到</span></span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;&#125;,</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">  created() &#123;&#125;,</span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  watch: &#123;&#125;,</span><br><span class="line">  computed: &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">'scss'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Test目录下的index.js文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Test是对应组件的名字，要记得在index.vue文件中的name属性</span></span><br><span class="line"><span class="keyword">import</span> Test <span class="keyword">from</span> <span class="string">'./src/index.vue'</span></span><br><span class="line"></span><br><span class="line">Test.install = <span class="function"><span class="params">Vue</span> =&gt;</span> &#123;</span><br><span class="line">  Vue.component(Test.name, Test)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Test</span><br></pre></td></tr></table></figure>

<p>install是vue中挂载组件的方法，有了它我们就可以在外部use一个插件。</p>
<p>在src目录下有一个index.js文件，这就是我们再webpack中配置的入口文件，后面会说到，先看一下该文件的配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Test <span class="keyword">from</span> <span class="string">'./packages/Test'</span></span><br><span class="line"><span class="comment">// 如果还有其他组件的话可以继续添加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> components = [Test] <span class="comment">// 还有的话可以继续添加，是一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="params">vue</span> =&gt;</span> &#123;</span><br><span class="line">  components.map(<span class="function"><span class="params">component</span> =&gt;</span> &#123;</span><br><span class="line">    vue.component(component.name, component)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每个组件都有一个install方法，同上面的install方法相同，这个防范的第一个参数是Vue构造器,第二个参数是一个可选的选项对象。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</span><br><span class="line">  install(<span class="built_in">window</span>.Vue)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  Test</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>package.json文件的配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"module-test-demo"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"npm测试包"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.8"</span>,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">"XXX"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="string">"private"</span>: <span class="literal">false</span>, <span class="comment">//如果你发布的共有包，这个参数必须为false</span></span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"cross-env NODE_ENV=development webpack-dev-server --open --hot"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"cross-env NODE_ENV=production webpack --progress --hide-modules"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"dist/module-test-demo.min.js"</span> <span class="comment">// 发包之后的主文件，跟webpack中的配置相同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>webpack.config.js文件配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">entry: <span class="string">'./src/index.js'</span>, <span class="comment">// 项目的主入口文件</span></span><br><span class="line">output: &#123;</span><br><span class="line">   path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">   publicPath: <span class="string">'/dist/'</span>,</span><br><span class="line">   filename: <span class="string">'module-test-demo.min.js'</span>, <span class="comment">// 打包完之后文件的名称</span></span><br><span class="line">   library: <span class="string">'ModuleTestDemo'</span>, <span class="comment">// 将library暴露为一个名为"ModuleTestDemo"的变量</span></span><br><span class="line">   libraryTarget: <span class="string">'umd'</span>, <span class="comment">// 这是一种可以将你的library能够在所有的模块定义下都可运行的方式</span></span><br><span class="line">   umdNamedDefine: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当你在import引入模块时，这可以讲你的library bundle暴露为名为ModuleTestDemo的全局变量，为了让library和其他环境兼容，还需要在配置文件中添加<code>libraryTarget</code>属性，这是可以控制library如何以不同方式暴露的选项。</p>
<p>libraryTarget选项（默认值为：var）：</p>
<ul>
<li>变量：作为一个全局变量，通过<code>script</code>标签来访问 { <code>libraryTarget: &#39;var&#39;</code> }</li>
<li>this：通过<code>this</code>对象来访问 { <code>libraryTarget: &#39;this&#39;</code> }</li>
<li>window：通过<code>window</code>对象访问，在浏览器中 { <code>libraryTarget: &#39;window&#39;</code> }</li>
<li>umd：在AMD或CommonJS的<code>require</code>之后可访问 { <code>libraryTarget: &#39;umd&#39;</code> }</li>
</ul>
<h4 id="发布npm包"><a href="#发布npm包" class="headerlink" title="发布npm包"></a>发布npm包</h4><ul>
<li>初始化刚刚的项目</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm init // 发包之前必须要执行这一步，我就是没执行这一步，导致发布的包在引入之后不能用，如果不执行这一步，发包之后在包目录下并没有生成dist文件夹，因此发包之后你的东西并没有引入进入，导致你引入的包找不到</span><br></pre></td></tr></table></figure>

<ul>
<li>登录npm</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm login // 输入用户名和密码，以及当时注册的邮箱，邮箱必须要认证，不然发包时会报错</span><br></pre></td></tr></table></figure>

<ul>
<li>登录成功后就可以发包了，发包之前必须使用npm官方镜像，不然发包会报错</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nrm use npm // 使用官方的镜像</span><br><span class="line">$ npm version patch // 修改版本</span><br><span class="line">$ npm publish // 发布</span><br></pre></td></tr></table></figure>

<p>npm version参数说明：</p>
<ul>
<li>patch：小变动，比如修复bug等，版本号变动  v1.0.0 -&gt; v1.0.1</li>
<li>minor：增加新功能，不影响现有版本的功能，版本号变动  v1.0.0 -&gt; v1.1.0</li>
<li>major：破坏模块对其向后的兼容性，一般这个版本号的变动意味着不向下兼容，版本号变动  v1.0.0 -&gt; v2.0.0</li>
</ul>
<p>发布时，可能会遇到下面这个问题，这就是你的npm包的名称与现有的包名称冲突，你需要更改package.json中的name，重新发布。</p>
<p><img src="https://i.loli.net/2019/06/22/5d0df56722d6030815.png" alt></p>
<p>运行之后看到如下图，说明已经发包成功，在npm官网搜索就可以看到了。</p>
<p><img src="https://i.loli.net/2019/06/22/5d0df5e7883a342589.png" alt></p>
<p>这就是我从封装插件到npm发包的过程，中间因为没有执行<code>npm init</code>命令，导致我发包只有引入一直报错，我找了很久才发现，所以在发包之前一定要执行该命令，不然会被坑，记一次我踩坑的经历。</p>
]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>vue的mixins和slot</title>
    <url>/2019/08/24/vue%E7%9A%84mixins%E5%92%8Cslot/</url>
    <content><![CDATA[<h3 id="vue的混入mixins"><a href="#vue的混入mixins" class="headerlink" title="vue的混入mixins"></a>vue的混入mixins</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>官方定义：混入（mixins）提供了一种非常灵活的方式，来分发Vue组件中可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p>
<p>但是根据我自己的理解，我觉得mixins就是将vue的组件中的js部分提取出来，把各个组件中共用的数据（包括：data，methods，各种生命周期钩子函数等，只要你能在组件中操作的js都可以放在mixins中）统一放在一个文件中集中处理。</p>
<a id="more"></a>

<h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>创建mixin.js文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      userList: [],</span><br><span class="line">      mixinLatestVersion: <span class="string">''</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    versions() &#123;</span><br><span class="line">      <span class="keyword">let</span> version = <span class="keyword">this</span>.mixinLatestVersion</span><br><span class="line">      <span class="keyword">const</span> versions = []</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">        versions.unshift(&#123;</span><br><span class="line">          label: <span class="string">`V<span class="subst">$&#123;version&#125;</span>`</span>,</span><br><span class="line">          value: version,</span><br><span class="line">        &#125;)</span><br><span class="line">        version -= <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">while</span> (version &gt;= <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> versions</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> created() &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">this</span>.getUserList()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 获取用户列表</span></span><br><span class="line">    <span class="keyword">async</span> getUserList() &#123;</span><br><span class="line">      <span class="keyword">this</span>.userList = <span class="keyword">await</span> CrashFeedback.GET_USER_LIST()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> getNewVersion() &#123;</span><br><span class="line">      <span class="keyword">const</span> id = sessionStorage.getItem(<span class="string">'projectId'</span>)</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> PROJECT_GET(id)</span><br><span class="line">      sessionStorage.setItem(<span class="string">'version'</span>, result.version)</span><br><span class="line">      <span class="keyword">this</span>.mixinLatestVersion = result.version</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mixin</span><br></pre></td></tr></table></figure>

<h5 id="局部混入"><a href="#局部混入" class="headerlink" title="局部混入"></a>局部混入</h5><p>在需要用到的页面中引入该文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mixin <span class="keyword">from</span> <span class="string">'xxx/xxx/mixin'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; <span class="comment">// 使用</span></span><br><span class="line">    mixins: [mixin]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。生命周期中是先调用混入的再调用当前组件的，如果存在同名的数据则以当前组件中定义的数据为主。</p>
<h5 id="全局混入"><a href="#全局混入" class="headerlink" title="全局混入"></a>全局混入</h5><p>在main.js文件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mixin <span class="keyword">from</span> <span class="string">'xxx/xxx/mixin'</span></span><br><span class="line">Vue.mixin(mixin)</span><br></pre></td></tr></table></figure>

<p>注意：全局混入会影响之后创建的每一个vue实例，需要谨慎使用。</p>
<h3 id="Vue的插槽slot"><a href="#Vue的插槽slot" class="headerlink" title="Vue的插槽slot"></a>Vue的插槽slot</h3><h4 id="单个slot"><a href="#单个slot" class="headerlink" title="单个slot"></a>单个slot</h4><p>子组件中写入slot标签，父组件在引用时在相应的子组件中写入要显示在插槽中的元素内容，同时还可以在插槽中填写默认内容。代码如下：</p>
<p>parent.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">        &lt;child&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                这是父组件的slot替代内容！</span><br><span class="line">            &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>child&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">'./child.vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        child</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>child.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"child"</span>&gt;</span><br><span class="line">        &lt;h2&gt;这是子组件childComponment!&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;slot&gt;</span></span><br><span class="line"><span class="regexp">            &lt;span style="color: red;"&gt;父组件没有插入的内容时，显示的默认内容！&lt;/</span>span&gt;</span><br><span class="line">        &lt;<span class="regexp">/slot&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><p>parent.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">        &lt;child&gt;</span><br><span class="line">        	&lt;h1 slot=<span class="string">"content"</span>&gt;cotnent的内容&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">			&lt;h2 slot="title"&gt;title的内容&lt;/</span>h2&gt;</span><br><span class="line">            &lt;p&gt;无具名插槽的内容&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>child&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">'./child.vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        child</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>child.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"child"</span>&gt;</span><br><span class="line">        &lt;h2&gt;这是子组件childComponment!&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">		&lt;slot name="content"&gt;子组件中content的内容&lt;/</span>slot&gt;</span><br><span class="line">		&lt;slot name=<span class="string">"title"</span>&gt;子组件中title的内容&lt;<span class="regexp">/slot&gt;</span></span><br><span class="line"><span class="regexp">        &lt;slot&gt;</span></span><br><span class="line"><span class="regexp">            &lt;span style="color: red;"&gt;父组件没有插入的内容时，显示的默认内容！&lt;/</span>span&gt;</span><br><span class="line">        &lt;<span class="regexp">/slot&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><p>我认为作用域插槽即可以在插槽中传入参数</p>
<p>parent.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">        &lt;child&gt;</span><br><span class="line">        	&lt;template slot-scope=<span class="string">"slotProps"</span>&gt;</span><br><span class="line">                &lt;!-- 这里显示子组件传来的数据 --&gt;</span><br><span class="line">                &lt;p&gt;&#123;&#123;slotProps&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>template&gt;</span><br><span class="line">        &lt;<span class="regexp">/child&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import child from './</span>child.vue<span class="string">'</span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">    components:&#123;</span></span><br><span class="line"><span class="string">        child</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>child.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"child"</span>&gt;</span><br><span class="line">        &lt;slot msg=<span class="string">"子组件信息"</span> slotData=<span class="string">"子组件数据"</span>&gt;&lt;<span class="regexp">/slot&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure>

<p>vue中默认将slot-scope的插槽对象命名为slotProps，也可以自定义名称，slotProps中得到的时候所有slot中的数据。</p>
]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack的使用</title>
    <url>/2019/06/21/webpack%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="一、前端环境搭建"><a href="#一、前端环境搭建" class="headerlink" title="一、前端环境搭建"></a>一、前端环境搭建</h4><p>使用npm或yarn来安装webpack，在webpack3中，webpack本身和它的cli是在同一个包中，但在webpack4中，已经将两者分来来更好地管理它们。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install webpack webpack-cli -g</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn global add webpack webpack-cli</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm init -y // -y 默认所有的配置</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="二、部署webpack"><a href="#二、部署webpack" class="headerlink" title="二、部署webpack"></a>二、部署webpack</h4><p>在上面搭建好的环境项目中，我们来到package.json里配置scripts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="comment">//我们在这里配置，就可以使用npm run build 启动我们的webpack</span></span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"webpack --mode production"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"webpack"</span>: <span class="string">"^4.16.0"</span>,</span><br><span class="line">    <span class="string">"webpack-cli"</span>: <span class="string">"^3.0.8"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="三、npm-run-build发生了什么"><a href="#三、npm-run-build发生了什么" class="headerlink" title="三、npm run build发生了什么"></a>三、npm run build发生了什么</h4><p>在我们的根目录下新建一个src目录。在src目录下新建一个index.js文件。在里面写入任意代码。在终端运行npm run build命令后，你会发现新增了一个dist目录，里面存放着webpack打包好的main.js文件。类似于vue-cli中的main.js文件。</p>
<h4 id="四、webpack配置"><a href="#四、webpack配置" class="headerlink" title="四、webpack配置"></a>四、webpack配置</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./app/entry"</span>, <span class="comment">// string | object | array</span></span><br><span class="line">  <span class="comment">// Webpack打包的入口</span></span><br><span class="line">  output: &#123;  <span class="comment">// 定义webpack如何输出的选项</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>), <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 所有输出文件的目标路径</span></span><br><span class="line">    filename: <span class="string">"[chunkhash].js"</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 「入口(entry chunk)」文件命名模版</span></span><br><span class="line">    publicPath: <span class="string">"/assets/"</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 构建文件的输出目录</span></span><br><span class="line">    <span class="comment">/* 其它高级配置 */</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;  <span class="comment">// 模块相关配置</span></span><br><span class="line">    rules: [ <span class="comment">// 配置模块loaders，解析规则</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?$/</span>,  <span class="comment">// RegExp | string</span></span><br><span class="line">        include: [ <span class="comment">// 和test一样，必须匹配选项</span></span><br><span class="line">          path.resolve(__dirname, <span class="string">"app"</span>)</span><br><span class="line">        ],</span><br><span class="line">        exclude: [ <span class="comment">// 必不匹配选项（优先级高于test和include）</span></span><br><span class="line">          path.resolve(__dirname, <span class="string">"app/demo-files"</span>)</span><br><span class="line">        ],</span><br><span class="line">        loader: <span class="string">"babel-loader"</span>, <span class="comment">// 模块上下文解析</span></span><br><span class="line">        options: &#123; <span class="comment">// loader的可选项</span></span><br><span class="line">          presets: [<span class="string">"es2015"</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123; <span class="comment">//  解析模块的可选项</span></span><br><span class="line">    modules: [ <span class="comment">// 模块的查找目录</span></span><br><span class="line">      <span class="string">"node_modules"</span>,</span><br><span class="line">      path.resolve(__dirname, <span class="string">"app"</span>)</span><br><span class="line">    ],</span><br><span class="line">    extensions: [<span class="string">".js"</span>, <span class="string">".json"</span>, <span class="string">".jsx"</span>, <span class="string">".css"</span>], <span class="comment">// 用到的文件的扩展</span></span><br><span class="line">    alias: &#123; <span class="comment">// 模块别名列表</span></span><br><span class="line">      <span class="string">"module"</span>: <span class="string">"new-module"</span></span><br><span class="line">	  &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="string">"source-map"</span>, <span class="comment">// enum</span></span><br><span class="line">  <span class="comment">// 为浏览器开发者工具添加元数据增强调试</span></span><br><span class="line">  plugins: [ <span class="comment">// 附加插件列表</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Entry：指定webpack开始构建的入口模块，从改模块开始构建并计算出直接或间接依赖的模块或库</li>
<li>Output：告诉webpack如何命名输出的文件以及输出的目录</li>
<li>Loaders：由于webpack只能处理JavaScript，所以我们需要对一些非js文件处理成webpack能够处理的模块，比如sass文件</li>
<li>Plugins：Loaders将各类型的文件处理成webpack能够处理的模块，plugins有着很强的能力。插件的范围包括：从打包优化到压缩，一直都重新定义环境中的变量。但也是最复杂的一个。比如对js文件进行压缩优化的UglifyPlugin插件。</li>
<li>Chunk：coding split的产物，我们可以对一些代码打包成一个单独的chunk，比如某些公共模块，去重，更好的利用缓存。或者按需加载默写功能模块，优化加载时间。在webpack3及以前我们都利用CommonsChunkPlugin将一些公共代码分割成一个chunk，实现单独加载。在webpack4中CommonsChunkPlugin被废弃，使用SplitChunksPlugin。</li>
</ul>
<h4 id="webpack配置详解："><a href="#webpack配置详解：" class="headerlink" title="webpack配置详解："></a>webpack配置详解：</h4><h5 id="1、引入我们需要的npm模块"><a href="#1、引入我们需要的npm模块" class="headerlink" title="1、引入我们需要的npm模块"></a>1、引入我们需要的npm模块</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//node 原生path模块</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// webpack</span></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// glob模块，用于读取webpack入口目录文件</span></span><br><span class="line"><span class="keyword">var</span> glob = <span class="built_in">require</span>(<span class="string">'glob'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack插件,用于分离项目中的css文件</span></span><br><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//webpack插件，用于生成HTML文件</span></span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack插件，用于webpack加载之后打开一个新的浏览器</span></span><br><span class="line"><span class="keyword">var</span> OpenBrowserPlugin = <span class="built_in">require</span>(<span class="string">'open-browser-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack插件，用于清除目录文件</span></span><br><span class="line"><span class="keyword">var</span> CleanPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理chunk，用于提取第三方库和公共模块</span></span><br><span class="line"><span class="keyword">var</span> CommonsChunkPlugin = webpack.optimize.CommonsChunkPlugin;</span><br></pre></td></tr></table></figure>

<h5 id="2、读取入口文件"><a href="#2、读取入口文件" class="headerlink" title="2、读取入口文件"></a>2、读取入口文件</h5><p>利用glob读取模块的入口文件。然后将配置封装在modules.exports，定义入口entry字段，entry可以为字符串、对象或者数组，对应单页面和多页面应用。</p>
<h5 id="3、定义资源输出"><a href="#3、定义资源输出" class="headerlink" title="3、定义资源输出"></a>3、定义资源输出</h5><p>资源打包输出的配置在output内，主要包括path、filename、chunkFilename以及publicPath。path是资源输出路径，filename是资源命名规则，chunkFilename是公共js打包后输出的命名，publicPath是静态资源的公共路径，比如线上CDN地址等，开发环境可以不设置，这样css中的相对路径就不会包括publicPath。在output输出的时候可以根据开发环境或者生产环境选择不同的文件命名方法，因为一般来说，线上的资源都是要经过压缩的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, prod ? <span class="string">"./dist"</span> : <span class="string">"./build"</span>),</span><br><span class="line">        filename: prod ? <span class="string">"js/[name].min.js"</span> : <span class="string">"js/[name].js"</span>,</span><br><span class="line">        chunkFilename: <span class="string">'js/[name].chunk.js'</span>,</span><br><span class="line">        publicPath: prod ? <span class="string">"http:cdn.mydomain.com"</span> : <span class="string">""</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<p>[name]的值是根据入口entry显示的文件名。比如index.js这个入口文件，对应的output的[name]值就应该是’index’。</p>
<h5 id="4、定义resolve"><a href="#4、定义resolve" class="headerlink" title="4、定义resolve"></a>4、定义resolve</h5><p>为了开发方便，我们可以定义自己的别名，以便很快捷地引用不同的模块，别名(alias)的定义是在resolve对象之中。比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    <span class="comment">// 模块别名</span></span><br><span class="line">    alias:&#123;</span><br><span class="line">        xyz: <span class="string">"/absolute/path/to/file.js"</span></span><br><span class="line">    &#125;，</span><br><span class="line">    <span class="comment">// 配置项，设置可以忽略的文件后缀</span></span><br><span class="line">    extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.less'</span>, <span class="string">'.css'</span>, <span class="string">'.png'</span>, <span class="string">'.jpg'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们在代码中require(‘xyz’)的时候，实际上我们是引入’、absolute/path/to/file.js’这个文件。还可以配置extensions对象，使得开发过程中文件资源的处理可以忽略后缀。</p>
<h5 id="5、Loader"><a href="#5、Loader" class="headerlink" title="5、Loader"></a>5、Loader</h5><p>Loader就是资源转换器。由于在webpack里，所有的资源都是模块，不同资源都最终转化为js去处理。针对不同形式的资源采用不同的Loader去编译，这就是Loader的意义。Loader在使用之前必须先通过npm安装，然后在config里面通过module配置才能使用。举个例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">loaders: [&#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|jpeg|gif)$/</span>,</span><br><span class="line">    loader: <span class="string">'url-loader'</span>,</span><br><span class="line">    query:&#123;</span><br><span class="line">        limit:<span class="string">'10000'</span>,</span><br><span class="line">        name:<span class="string">'images/[name].[ext]'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>

<p>上述配置中，test的作用是正则匹配，匹配到png或jpg或gif结尾的文件就采用url-loader来做对应的编译。由于loader都是默认以-loader后缀结尾的，所以可以直接省略’-loader’，直接写成url。limit表示10000B以下的图片直接压缩成base64编码，超时10000B的图片输出到’images/文件名.拓展名’。</p>
<p>配置中常用的loader：</p>
<ul>
<li>处理样式，转成css，如：less-loader，sass-loader。</li>
<li>图片处理，如：url-loader，file-loader。两个都必须用上。否则超过大小限制的图片无法生成到目标文件夹中。</li>
<li>处理js，将es6或跟高级的代码转成es5的代码。如：babel-loader，babel-preset-es2015，babel-preset-react</li>
<li>将js模块暴露到全局，使用expose-loader</li>
</ul>
<h5 id="6、Plugin"><a href="#6、Plugin" class="headerlink" title="6、Plugin"></a>6、Plugin</h5><p>插件的引入和loader差不多，只是插件是以对象的形式引入。像静态资源路径的替换这种功能就能通过插件来处理。比如共用模块打包到chunk的插件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> chunks = <span class="built_in">Object</span>.keys(entries);</span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span>  webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">        name: <span class="string">'vendors'</span>, <span class="comment">// 将公共模块提取，生成名为`vendors`的chunk</span></span><br><span class="line">        chunks: chunks,</span><br><span class="line">        minChunks: chunks.length <span class="comment">// 提取所有entry共同依赖的模块</span></span><br><span class="line">    &#125;)</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<p>配置中常用的plugin：</p>
<ul>
<li>代码热替换，HotModuleReplacementPlugin</li>
<li>生成html文件，HtmlWebpackPlugin</li>
<li>将css生成文件，而非内联，ExtractTextPlugin</li>
<li>报错但不退出webpack进程，NoErrorsPlugin</li>
<li>代码丑化，UglifyJsPlugin，开发过程不建议打开</li>
<li>多个html共用一个js文件(chunk)，可用CommonsChunkPlugin</li>
<li>清理文件夹，CleanWebpackPlugin</li>
<li>调用模块的别名ProvidePlugin，例如想在js中用’$’，如果通过webpack加载，需要将$与JQuery对应起来</li>
</ul>
<h5 id="7、定义webpack-dev-server"><a href="#7、定义webpack-dev-server" class="headerlink" title="7、定义webpack-dev-server"></a>7、定义webpack-dev-server</h5><p>webpack-dev-server是webpack提供的静态资源服务器，它的存在使得开发可以脱离代理服务器工作。开发调试静态资源不再需要搭建本地服务器。webpack-dev-server有多种配置形式，这里采用的是写死在config的方式，这种方式的特点是方便开发，缺点是不灵活。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">devServer = &#123;</span><br><span class="line">       port: 8080,</span><br><span class="line">       contentBase: &apos;./build&apos;, //定义静态服务器的基路径</span><br><span class="line">       hot: true,</span><br><span class="line">       historyApiFallback: true,</span><br><span class="line">       publicPath: &quot;&quot;,</span><br><span class="line">       stats: &#123;</span><br><span class="line">           colors: true</span><br><span class="line">       &#125;,</span><br><span class="line">       plugins: [</span><br><span class="line">       new webpack.HotModuleReplacementPlugin()</span><br><span class="line">       ]</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h5 id="webpack的机制详解，参考文章：https-juejin-im-post-5aa3d2056fb9a028c36868aa-heading-1"><a href="#webpack的机制详解，参考文章：https-juejin-im-post-5aa3d2056fb9a028c36868aa-heading-1" class="headerlink" title="webpack的机制详解，参考文章：https://juejin.im/post/5aa3d2056fb9a028c36868aa#heading-1"></a>webpack的机制详解，参考文章：<a href="https://juejin.im/post/5aa3d2056fb9a028c36868aa#heading-1" rel="noopener" target="_blank">https://juejin.im/post/5aa3d2056fb9a028c36868aa#heading-1</a></h5>]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>仿elementUI的周选择日历组件</title>
    <url>/2019/11/06/%E4%BB%BFelementUI%E7%9A%84%E5%91%A8%E9%80%89%E6%8B%A9%E6%97%A5%E5%8E%86%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>日历的控件数不胜数，大多数日历控件都是用来选择日期，用来找出具体的某一天，但是我们的需求是需要点击本周的任意一天，选择本周的时间，找了很多组件，并没有发现合适的组件，于是决定再造一个轮子，自己仿照elementUI中的日期选择选择周的日期组件，来封装一个选择周的日历组件。</p>
<p>UI图样式如下：UI样式是仿照elementUI中的日期选择器（element的样式比较好看）</p>
<a id="more"></a>

<p><img src="https://i.loli.net/2019/11/07/6XfbFndIAE4gzUi.png" alt></p>
<h3 id="实现分析"><a href="#实现分析" class="headerlink" title="实现分析"></a>实现分析</h3><p>​        观察到日历的排列为一个7X6的布局，保证日历的显示是定宽和定高的，不会随着月份的改变而更改，而且7X6能保证该月的日期都能正常显示。如何将当月的日期在日期中绘制出来？观察发现，日历的第一周是当月的1号所在的周，结束日期找到当月的最后一天所在周的最后一天，从开始周的第一天到最后周的最后一天中间如果相隔35天，则再结束日期再向后顺延一周，否则就是当前选择的结束日期。</p>
<pre><code>// 开始日期 = 当月1号所在周的开始日期
// 结束日期 = 结束日期 - 开始日期 === 41 ？ 当月最后日期所在周的最后一天 ： 当月最后日期所在周的最后一天 + 7天</code></pre><h4 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h4><pre><code>&lt;template&gt;
  &lt;div class=&quot;weekDay&quot;&gt;
    &lt;div class=&quot;date-header&quot;&gt;
      &lt;button
        type=&quot;button&quot;
        aria-label=&quot;前一年&quot;
        class=&quot;el-picker-panel__icon-btn el-date-picker__prev-btn el-icon-d-arrow-left&quot;
        @click=&quot;currentYear -= 1&quot;
      &gt;&lt;/button&gt;
      &lt;button
        type=&quot;button&quot;
        aria-label=&quot;上个月&quot;
        class=&quot;el-picker-panel__icon-btn el-date-picker__prev-btn el-icon-arrow-left&quot;
        @click=&quot;currentMonth -= 1&quot;
      &gt;&lt;/button&gt;
      &lt;span role=&quot;button&quot; class=&quot;el-date-picker__header-label&quot;&gt;{{ currentYear }}年&lt;/span&gt;
      &lt;span role=&quot;button&quot; class=&quot;el-date-picker__header-label&quot;&gt;{{ currentMonth }}月&lt;/span&gt;
      &lt;button
        type=&quot;button&quot;
        aria-label=&quot;后一年&quot;
        class=&quot;el-picker-panel__icon-btn el-date-picker__next-btn el-icon-d-arrow-right&quot;
        @click=&quot;currentYear += 1&quot;
      &gt;&lt;/button&gt;
      &lt;button
        type=&quot;button&quot;
        aria-label=&quot;下个月&quot;
        class=&quot;el-picker-panel__icon-btn el-date-picker__next-btn el-icon-arrow-right&quot;
        @click=&quot;currentMonth += 1&quot;
      &gt;&lt;/button&gt;
    &lt;/div&gt;
    &lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;date-table&quot;&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;th v-for=&quot;(week, key) in WEEKS&quot; :key=&quot;key&quot;&gt;{{ week }}&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr
          v-for=&quot;(row, key) in rows&quot;
          :key=&quot;key&quot;
          :class=&quot;activeClass(row)&quot;
          @click=&quot;chooseDate(row, key)&quot;
        &gt;
          &lt;td v-for=&quot;(cell, key) in row&quot; :key=&quot;key&quot;&gt;
            &lt;div :class=&quot;disabledDayStyle(cell)&quot; style=&quot;padding: 3px 0;box-sizing: border-box;&quot;&gt;
              &lt;span class=&quot;cell-table&quot;&gt;{{ new Date(cell).getDate() }}&lt;/span&gt;
            &lt;/div&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/div&gt;
&lt;/template&gt;</code></pre><h4 id="绘制日历"><a href="#绘制日历" class="headerlink" title="绘制日历"></a>绘制日历</h4><ul>
<li><p>计算一个月中的开始日期和结束日期</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">    <span class="keyword">this</span>.firstDate = <span class="keyword">new</span> <span class="built_in">Date</span>(dayjs().startOf(<span class="string">'month'</span>)) <span class="comment">//当月的第一天</span></span><br><span class="line">    <span class="keyword">this</span>.lastDate = <span class="keyword">new</span> <span class="built_in">Date</span>(dayjs().endOf(<span class="string">'month'</span>)) <span class="comment">// 当月的最后一天</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 某天所在周的周一</span></span><br><span class="line"> weekFirstDay(date) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>(date).getDay() !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> weekfirst = dayjs(date)</span><br><span class="line">        .startOf(<span class="string">'week'</span>)</span><br><span class="line">        .add(<span class="number">1</span>, <span class="string">'day'</span>)</span><br><span class="line">        <span class="keyword">return</span> weekfirst</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> weekfirst = dayjs(date)</span><br><span class="line">    .subtract(<span class="number">1</span>, <span class="string">'day'</span>)</span><br><span class="line">    .startOf(<span class="string">'week'</span>)</span><br><span class="line">    .add(<span class="number">1</span>, <span class="string">'day'</span>)</span><br><span class="line">    <span class="keyword">return</span> weekfirst</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="comment">// 某天所在周的周日</span></span><br><span class="line"> weekLastDay(date) &#123;</span><br><span class="line">     <span class="keyword">const</span> weeklast = dayjs(date)</span><br><span class="line">     .endOf(<span class="string">'week'</span>)js</span><br><span class="line">     .add(<span class="number">1</span>, <span class="string">'day'</span>)</span><br><span class="line">     <span class="keyword">return</span> weeklast</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>由于要处理很多的时间，用js中的date处理起来比较麻烦，因此直接使用day.js来对日期进行统一处理。</p>
<p>由于产品需要，一周以周一开始，以周日结束。</p>
<ul>
<li><p>绘制一月中的日期</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上面已经可以计算出绘制的日期的开始时间和结束时间，那么需要进行遍历求出当月包含当月所有日期的数组。</span></span><br><span class="line"><span class="comment">// 获取天数的数组</span></span><br><span class="line">getDays() &#123;</span><br><span class="line">    <span class="keyword">this</span>.days = []</span><br><span class="line">    <span class="keyword">let</span> startDate = <span class="keyword">this</span>.weekFirstDay(<span class="keyword">this</span>.firstDate) <span class="comment">// 开始日期</span></span><br><span class="line">    <span class="keyword">let</span> endDate = <span class="keyword">this</span>.weekLastDay(<span class="keyword">this</span>.lastDate) <span class="comment">// 结束日期</span></span><br><span class="line">    <span class="keyword">const</span> diffDay = endDate.diff(startDate, <span class="string">'day'</span>) <span class="comment">// 差值</span></span><br><span class="line">    <span class="keyword">if</span> (diffDay !== <span class="number">41</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果差值不为41天，则向后加7天</span></span><br><span class="line">        endDate = dayjs(endDate).add(<span class="number">7</span>, <span class="string">'day'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历后组成一个包含所有日期的数组</span></span><br><span class="line">    <span class="keyword">while</span> (startDate &lt;= endDate) &#123;</span><br><span class="line">        <span class="keyword">this</span>.days.push(dayjs(startDate).toDate())</span><br><span class="line">        startDate = dayjs(startDate)</span><br><span class="line">            .add(<span class="number">1</span>, <span class="string">'day'</span>)</span><br><span class="line">            .toDate()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;，</span><br><span class="line">computed: &#123;</span><br><span class="line">    <span class="comment">// 利用计算属性，对该数组进行遍历，如果到7，就自动变为下一行，将该一维数组变为一个二维数组</span></span><br><span class="line">    rows() &#123;</span><br><span class="line">        <span class="keyword">let</span> childArr = []</span><br><span class="line">        <span class="keyword">const</span> parentArr = []</span><br><span class="line">        <span class="keyword">this</span>.days.forEach(<span class="function"><span class="params">day</span> =&gt;</span> &#123;</span><br><span class="line">            childArr.push(day)</span><br><span class="line">            <span class="keyword">if</span> (childArr.length === <span class="number">7</span>) &#123;</span><br><span class="line">                parentArr.push(childArr)</span><br><span class="line">                childArr = []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> parentArr</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>在此过程中需要将当前天的日期标记出来，同时需要对所选周的周一及周日进行高亮显示。</p>
<ul>
<li>切换月份和年份的实现</li>
</ul>
<p>上面已经基本上把一个日历绘制出来了，切换月份和年份就比较简单一点。根据改变的年份和月份重新计算所选年月的日期数组，进行遍历即可。</p>
<pre><code>// 日期改变
changeDate() {
    const now = new Date(`${this.currentYear}-${this.currentMonth}`)
    this.firstDate = new Date(dayjs(now).startOf(&apos;month&apos;))
    this.lastDate = new Date(dayjs(now).endOf(&apos;month&apos;))
    this.getDays()
}，
watch: {
  currentYear: {
     handler() {
       this.changeDate()
     },
     deep: true
  },
  currentMonth: {
    handler(newMon) {
      if (newMon === 0) {
        this.currentMonth = 12
        this.currentYear -= 1
      } else if (newMon === 13) {
        this.currentMonth = 1
        this.currentYear += 1
      }
      this.changeDate()
    },
    deep: true
   }
 }</code></pre><p>以上就是绘制这个日历周选择控件的基本思路，只要可以找到所选择月的开始日期和结束日期，找出需要绘制的日期的数据，对数据进行遍历绘制即可。剩下的就是一些UI的样式问题。仿照一个好看的日历组件，修改一下样式即可。</p>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>element-ui</tag>
      </tags>
  </entry>
  <entry>
    <title>利用elementUI实现一个可编辑的表格</title>
    <url>/2019/10/06/%E5%88%A9%E7%94%A8elementUI%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%8F%AF%E7%BC%96%E8%BE%91%E7%9A%84%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<p>在使用ElementUI过程中，表格的使用占了很大一部分，但是ElementUI的表格只能实现单纯的展示功能，并不能在展示表格的同时实现表格中单元格的可编辑功能，但是在业务中又需要用到可编辑的表格，于是将ElementUI中的表格和表单结合起来，实现了一个带有表单验证的可编辑表格，刚好可以满足业务需要，同时又方便了表格的使用。</p>
<a id="more"></a>

<p>代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div style=<span class="string">"padding: 20px;"</span>&gt;</span><br><span class="line">    &lt;el-form ref=<span class="string">"form"</span> :model=<span class="string">"formData"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"table-with-input"</span>&gt;</span><br><span class="line">      &lt;el-table :header-cell-style=<span class="string">"&#123; background: '#DCDFE6', color: '#6C6C6C' &#125;"</span> :data=<span class="string">"formData.tableData"</span> border&gt;</span><br><span class="line">        &lt;slot name=<span class="string">"columnheader"</span>&gt;&lt;<span class="regexp">/slot&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-table-column v-for="col in title" :key="col.prop" :label="col.label" :prop="col.prop" min-width="120px" align="center"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;template slot-scope="scope"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;el-form-item :prop="`tableData.$&#123;scope.$index&#125;.$&#123;col.prop&#125;`" :rules="col.rules"&gt;</span></span><br><span class="line"><span class="regexp">              &lt;el-input v-if="col.type === 'text'" v-model="scope.row[col.prop]"&gt;&lt;/</span>el-input&gt;</span><br><span class="line">              &lt;el-input-number</span><br><span class="line">                v-<span class="keyword">if</span>=<span class="string">"col.type === 'money'"</span></span><br><span class="line">                :precision=<span class="string">"col.precision"</span></span><br><span class="line">                :max=<span class="string">"col.max"</span></span><br><span class="line">                :min=<span class="string">"col.min"</span></span><br><span class="line">                v-model=<span class="string">"scope.row[col.prop]"</span></span><br><span class="line">                :controls=<span class="string">"false"</span></span><br><span class="line">              &gt;&lt;<span class="regexp">/el-input-number&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>el-form-item&gt;</span><br><span class="line">          &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>el-table-column&gt;</span><br><span class="line">        &lt;slot name=<span class="string">"columnfooter"</span>&gt;&lt;<span class="regexp">/slot&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>el-table&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-form&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  data() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      title: [</span></span><br><span class="line"><span class="regexp">        &#123;</span></span><br><span class="line"><span class="regexp">          prop: 'one',</span></span><br><span class="line"><span class="regexp">          label: '一',</span></span><br><span class="line"><span class="regexp">          rules: [&#123; required: true, message: '课时不能为空', trigger: ['blur', 'change'] &#125;],</span></span><br><span class="line"><span class="regexp">          precision: 2,</span></span><br><span class="line"><span class="regexp">          type: 'money',</span></span><br><span class="line"><span class="regexp">          max: 99999,</span></span><br><span class="line"><span class="regexp">          min: 0</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        &#123;</span></span><br><span class="line"><span class="regexp">          prop: 'two',</span></span><br><span class="line"><span class="regexp">          label: '二',</span></span><br><span class="line"><span class="regexp">          rules: [&#123; required: true, message: '课时不能为空', trigger: ['blur', 'change'] &#125;],</span></span><br><span class="line"><span class="regexp">          precision: 2,</span></span><br><span class="line"><span class="regexp">          type: 'money',</span></span><br><span class="line"><span class="regexp">          max: 99999,</span></span><br><span class="line"><span class="regexp">          min: 0</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        &#123;</span></span><br><span class="line"><span class="regexp">          prop: 'three',</span></span><br><span class="line"><span class="regexp">          label: '三',</span></span><br><span class="line"><span class="regexp">          rules: [&#123; required: true, message: '课时不能为空', trigger: ['blur', 'change'] &#125;],</span></span><br><span class="line"><span class="regexp">          precision: 2,</span></span><br><span class="line"><span class="regexp">          type: 'money',</span></span><br><span class="line"><span class="regexp">          max: 99999,</span></span><br><span class="line"><span class="regexp">          min: 0</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">      ],</span></span><br><span class="line"><span class="regexp">      formData: &#123;</span></span><br><span class="line"><span class="regexp">        tableData: [</span></span><br><span class="line"><span class="regexp">          &#123;</span></span><br><span class="line"><span class="regexp">            one: 0,</span></span><br><span class="line"><span class="regexp">            two: 0,</span></span><br><span class="line"><span class="regexp">            three: 0</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">        ]</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      singleColumnData: &#123;&#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  props: &#123;&#125;,</span></span><br><span class="line"><span class="regexp">  methods: &#123;</span></span><br><span class="line"><span class="regexp">    addCol() &#123;</span></span><br><span class="line"><span class="regexp">      this.formData.tableData.push(this.singleColumnData)</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    delCol(index) &#123;</span></span><br><span class="line"><span class="regexp">      this.formData.tableData.splice(index, 1)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  created() &#123;</span></span><br><span class="line"><span class="regexp">    this.title.forEach(item =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      this.singleColumnData[item.prop] = 0</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">    console.log('单个数据：', this.singleColumnData)</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  components: &#123;&#125;,</span></span><br><span class="line"><span class="regexp">  watch: &#123;</span></span><br><span class="line"><span class="regexp">    title: &#123;</span></span><br><span class="line"><span class="regexp">      handler(val) &#123;</span></span><br><span class="line"><span class="regexp">        val.forEach(item =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          this.singleColumnData[item.prop] = 0</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">        console.log('单个数据：', this.singleColumnData)</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      deep: true</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  computed: &#123;&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=<span class="string">"scss"</span>&gt;</span><br><span class="line">.table-<span class="keyword">with</span>-input &#123;</span><br><span class="line">  /deep/.el-input-number &#123;</span><br><span class="line">    width: <span class="number">100</span>%;</span><br><span class="line">  &#125;</span><br><span class="line">  /deep/.el-table .cell,</span><br><span class="line">  /deep/.el-table--border td:first-child .cell &#123;</span><br><span class="line">    padding: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  /deep/.el-table--enable-row-hover .el-table__body tr:hover &gt; td &#123;</span><br><span class="line">    background-color: #fff !important;</span><br><span class="line">  &#125;</span><br><span class="line">  /deep/.el-table td &#123;</span><br><span class="line">    padding: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  /deep/.el-form-item &#123;</span><br><span class="line">    margin-bottom: <span class="number">20</span>px;</span><br><span class="line">  &#125;</span><br><span class="line">  /deep/.el-form-item__content,</span><br><span class="line">  /deep/.el-input-number &#123;</span><br><span class="line">    line-height: <span class="number">35</span>px;</span><br><span class="line">  &#125;</span><br><span class="line">  /deep/.el-input__inner &#123;</span><br><span class="line">    border: none;</span><br><span class="line">    height: <span class="number">35</span>px;</span><br><span class="line">    line-height: <span class="number">35</span>px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    color: #3296fa;</span><br><span class="line">  &#125;</span><br><span class="line">  /deep/.el-form-item__error &#123;</span><br><span class="line">    width: <span class="number">100</span>%;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure>

<p>其实实现可编辑的表格的原理即在一个表单中添加一个表格，表格的每个单元格就是表单中的每一项，但是注意，需要将表格中的每一行数据作为一个表单的一项，这样才可以实现表单的动态校验。</p>
<p>表单的动态校验的原则是：将表单中每一项的prop设置为唯一的值，同时prop的值需要同v-model中绑定的值相同，我是将表格中的头数据封装为一个动态的数据，可以实现表单的复用性</p>
<p><code>:prop=&quot;tableData.${scope.$index}.${col.prop}&quot;</code>，这个属性是重点哦。</p>
<p>这样我们就实现了一个可编辑的表格，是不是很简单，赶快动手试一下吧。</p>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>element-ui</tag>
      </tags>
  </entry>
  <entry>
    <title>利用hexo搭建自己的博客</title>
    <url>/2019/05/29/%E5%88%A9%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>作为一个程序员，不论功力高深与否，都要有一个属于自己的博客，来记录自己成长的轨迹以及心得。本教程针对的是不懂技术又想搭建个人博客的小白，简单快速的搭建一个属于自己的个人博客。正所谓站在巨人的肩膀上，本教程参考了别人搭建博客的经历，再加上自己实战经历。</p>
<h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>我采用的搭建博客的方式是使用github + hexo 的方式。</p>
<p>hexo是一个快速、简洁且高效的博客框架(官网介绍)。<a href="https://hexo.io/zh-cn/docs/" rel="noopener" target="_blank">hexo官网</a>。</p>
<a id="more"></a>

<h4 id="一、安装Git"><a href="#一、安装Git" class="headerlink" title="一、安装Git"></a>一、安装Git</h4><ul>
<li>Windows：下载并安装 <a href="https://git-scm.com/download/win" rel="noopener" target="_blank">git</a>.</li>
<li>Mac：使用 <a href="http://mxcl.github.com/homebrew/" rel="noopener" target="_blank">Homebrew</a>, <a href="http://www.macports.org/" rel="noopener" target="_blank">MacPorts</a> ：<code>brew install git</code>;或下载 <a href="http://sourceforge.net/projects/git-osx-installer/" rel="noopener" target="_blank">安装程序</a> 安装。</li>
</ul>
<h4 id="二、安装-Node-js"><a href="#二、安装-Node-js" class="headerlink" title="二、安装 Node.js"></a>二、安装 Node.js</h4><ul>
<li>安装 Node.js 的最佳方式是使用 <a href="https://github.com/creationix/nvm" rel="noopener" target="_blank">nvm</a>。</li>
<li>或者您也可以下载 <a href="http://nodejs.org/" rel="noopener" target="_blank">安装程序</a> 来安装。</li>
</ul>
<h4 id="三、在GitHub上创建GitHub-Pages项目"><a href="#三、在GitHub上创建GitHub-Pages项目" class="headerlink" title="三、在GitHub上创建GitHub Pages项目"></a>三、在GitHub上创建GitHub Pages项目</h4><ul>
<li><p>创建github仓库，命名格式为：github用户名+github.io（前提是要有github账号），GitHub会识别并自动将该仓库设为GitHub Pages。用户主页是唯一的，填其他的名称会被当做是普通项目。</p>
</li>
<li><p>克隆刚刚创建的项目仓库到本地，新建一个index.html页面，填入一些修改信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> 项目名</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'Hello World'</span> &gt; index.html</span><br><span class="line">$ git add *</span><br><span class="line">$ git commit -m <span class="string">'first commit'</span></span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<p>这时候，打开了浏览器，输入<a href="https://username.github.io，就可以成功访问啦。（出现Hello" rel="noopener" target="_blank">https://username.github.io，就可以成功访问啦。（出现Hello</a> World表示成功啦）。</p>
</li>
</ul>
<h4 id="四、安装并启动hexo"><a href="#四、安装并启动hexo" class="headerlink" title="四、安装并启动hexo"></a>四、安装并启动hexo</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo</span><br><span class="line">$ yarn add global hexo // 全局安装hexo</span><br><span class="line">// 手动创建一个文件夹，我的文件夹为Blog</span><br><span class="line">$ <span class="built_in">cd</span> Blog</span><br><span class="line">$ hexo init 初始化项目，新建一个网站</span><br><span class="line">$ hexo install</span><br><span class="line">$ hexo gengerate // 简写：hexo g 生成静态网页</span><br><span class="line">$ hexo server // 简写：hexo s 启动本地服务，默认端口为4000</span><br><span class="line">$ hexo s -p [port] // 修改端口号</span><br></pre></td></tr></table></figure>

<h4 id="五、部署"><a href="#五、部署" class="headerlink" title="五、部署"></a>五、部署</h4><ul>
<li><p>修改根目录下的 _config.yml文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    deploy:</span><br><span class="line">      type: git</span><br><span class="line">      repo: https:<span class="comment">//github.com/username/username.github.io.git // 博客的地址</span></span><br><span class="line">      branch: master <span class="comment">// 选择GitHubPages中设置的那个分支，而不是拉取这个项目的分支，一般为master</span></span><br><span class="line">      message: Blog <span class="comment">// 可自定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="六、写作和配置"><a href="#六、写作和配置" class="headerlink" title="六、写作和配置"></a>六、写作和配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt; // 创建新的博文</span><br></pre></td></tr></table></figure>

<ul>
<li>菜单显示about链接，在主题的_config.yml设置中将menu中about前面的注释去掉即可。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: <span class="regexp">/</span></span><br><span class="line"><span class="regexp">  archives: /</span>archives</span><br><span class="line">  tags: <span class="regexp">/tags</span></span><br><span class="line"><span class="regexp">  about: /</span>about</span><br></pre></td></tr></table></figure>

<ul>
<li>创建页面</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page <span class="string">"about"</span> // <span class="string">"关于我"</span>页面</span><br><span class="line">$ hexo new page <span class="string">"categories"</span> // <span class="string">"分类"</span>页面</span><br><span class="line">$ hexo new page <span class="string">"tags"</span> // 创建标签云页面</span><br></pre></td></tr></table></figure>

<ul>
<li><p>设置侧边栏头像</p>
<p>编辑主题的<code>_config.yml</code>文件，新增字段<code>avatar</code>，值设置成头像的链接地址。</p>
<p>其中，头像的链接地址可以分为两种：</p>
<p>1、完整的地址：例如：<code>https://avatars1.githubusercontent.com/u/32269?v=3&amp;s=460</code></p>
<p>2、站内地址：例如：<code>source/img/avatar.jpg</code>需要将你的图片放置在主题的<code>source/img</code>文件夹下</p>
</li>
<li><p>设置加载更多</p>
<p>要实现加载更多，只需要在文章开头写好摘要后，另起一行添加<!-- more -->即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">这是摘要</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">这是正文</span><br></pre></td></tr></table></figure>

<p>如果想要修改加载更多的样式，打开主题中的_config.yml文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">excerpt_link: 阅读更多 <span class="comment">// 默认为more</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="七、踩坑经历"><a href="#七、踩坑经历" class="headerlink" title="七、踩坑经历"></a>七、踩坑经历</h4><h5 id="1、不蒜子网站统计报错"><a href="#1、不蒜子网站统计报错" class="headerlink" title="1、不蒜子网站统计报错"></a>1、不蒜子网站统计报错</h5><p>采用spfk这个主题，发现他利用不蒜子网站统计不显示，看到不蒜子的官方网站发出了这样的消息：</p>
<p><img src="https://i.loli.net/2019/06/20/5d0b51950f72e26880.png" alt></p>
<p>进入hexo博客项目的<code>themes</code>目录下，在<code>spfk/layout/share/after-footer.ejs</code>文件，将</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>更改为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
